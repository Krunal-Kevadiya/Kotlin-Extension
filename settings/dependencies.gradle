ext.deps = [:]
ext.versions = [
  support  : "27.0.2",
  arch_comp: "1.1.1",
  arch_room_comp: "1.0.0",
  retrofit : "2.3.0",
  dagger   : "2.14.1",
  espresso : "3.0.1",
  atsl     : "1.0.1",
  kotlin   : "1.2.31",
  google   : "11.8.0",
  firebase : "11.6.0",
  ok_http  : "3.9.0",
  glide    : "4.4.0",
  intuit   : "1.0.5"
]

def deps = [:]
deps.support = [
  annotations      : "com.android.support:support-annotations:$versions.support",
  app_compat       : "com.android.support:appcompat-v7:$versions.support",
  recycler_view    : "com.android.support:recyclerview-v7:$versions.support",
  card_view        : "com.android.support:cardview-v7:$versions.support",
  design           : "com.android.support:design:$versions.support",
  v4               : "com.android.support:support-v4:$versions.support",
  core_utils       : "com.android.support:support-core-utils:$versions.support",
  multidex         : "com.android.support:multidex:1.0.2",
  constraint_layout: "com.android.support.constraint:constraint-layout:1.1.0-beta5"
]
deps.room = [
  lib     : "android.arch.persistence.room:runtime:$versions.arch_room_comp",
  compiler: "android.arch.persistence.room:compiler:$versions.arch_room_comp",
  rxjava2 : "android.arch.persistence.room:rxjava2:$versions.arch_room_comp",
  testing : "android.arch.persistence.room:testing:$versions.arch_room_comp"
]
deps.lifecycle = [
  lib       : "android.arch.lifecycle:runtime:$versions.arch_comp",
  extensions: "android.arch.lifecycle:extensions:$versions.arch_comp",
  java8     : "android.arch.lifecycle:common-java8:$versions.arch_comp",
  compiler  : "android.arch.lifecycle:compiler:$versions.arch_comp"
]
deps.androidArch = [
  testing: "android.arch.core:core-testing:$versions.arch_comp",
  paging : "android.arch.paging:runtime:$versions.arch_comp",
]
deps.retrofit = [
  lib        : "com.squareup.retrofit2:retrofit:$versions.retrofit",
  adapter_rx : "com.squareup.retrofit2:adapter-rxjava:$versions.retrofit",
  adapter_rx2: "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit",
  gson       : "com.squareup.retrofit2:converter-gson:$versions.retrofit"
]
deps.dagger = [
  lib                     : "com.google.dagger:dagger:$versions.dagger",
  android                 : "com.google.dagger:dagger-android:$versions.dagger",
  compiler                : "com.google.dagger:dagger-compiler:$versions.dagger",
  android_support         : "com.google.dagger:dagger-android-support:$versions.dagger",
  android_support_compiler: "com.google.dagger:dagger-android-processor:$versions.dagger"
]
deps.espresso = [
  core   : "com.android.support.test.espresso:espresso-core:$versions.espresso",
  contrib: "com.android.support.test.espresso:espresso-contrib:$versions.espresso",
  intents: "com.android.support.test.espresso:espresso-intents:$versions.espresso",
  testing: "com.android.support.test:testing-support-lib:0.1"
]
deps.atsl = [
  testing: "com.android.support.test:runner:$versions.atsl",
  rule   : "com.android.support.test:rules:$versions.atsl"
]
deps.mockito = [
  core: "org.mockito:mockito-core:$versions.mockito",
  all : "org.mockito:mockito-all:$versions.mockitoAll"
]
deps.robolectric = [
  plugin : "org.robolectric:robolectric-gradle-plugin:1.1.0",
  testing: "org.robolectric:robolectric:3.5.1"
]
deps.kotlin = [
  stdlib    : "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin",
  stdlib7   : "org.jetbrains.kotlin:kotlin-stdlib-jre7:$versions.kotlin",
  stdlib8   : "org.jetbrains.kotlin:kotlin-stdlib-jre8:$versions.kotlin",
  extensions: "org.jetbrains.kotlin:kotlin-android-extensions:$versions.kotlin",
  testing   : "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin",
  plugin    : "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin",
  reflect   : "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
]
deps.google = [
  services : "com.google.gms:google-services:3.1.1",
  auth     : "com.google.android.gms:play-services-auth:$versions.google",
  ads      : "com.google.android.gms:play-services-ads:$versions.google",
  location : "com.google.android.gms:play-services-location:$versions.google",
  analytics: "com.google.android.gms:play-services-analytics:$versions.google",
  gcm      : "com.google.android.gms:play-services-gcm:$versions.google",
  maps     : "com.google.android.gms:play-services-maps:$versions.google"
]
deps.firebase = [
  auth     : "com.google.firebase:firebase-auth:$versions.firebase",
  database : "com.google.firebase:firebase-database:$versions.firebase",
  messaging: "com.google.firebase:firebase-messaging:$versions.firebase"
]
deps.picasso = [
  lib       : "com.squareup.picasso:picasso:2.5.2",
  downloader: "com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0"
]
deps.glide = [
  lib        : "com.github.bumptech.glide:glide:$versions.glide",
  compiler   : "com.github.bumptech.glide:compiler:$versions.glide",
  annotations: "com.github.bumptech.glide:annotations:$versions.glide",
  downloader : "com.github.bumptech.glide:okhttp3-integration:$versions.glide",
  transformations : "jp.wasabeef:glide-transformations:3.1.0"
]
deps.okhttp = [
  lib    : "com.squareup.okhttp3:okhttp:$versions.ok_http",
  logging: "com.squareup.okhttp3:logging-interceptor:$versions.ok_http"
]
deps.javaxAndRx = [
  android   : 'io.reactivex:rxandroid:1.2.1',
  java      : 'io.reactivex:rxjava:1.3.0',
  android2  : "io.reactivex.rxjava2:rxandroid:2.0.2",
  java2     : "io.reactivex.rxjava2:rxjava:2.1.10",
  inject    : "javax.inject:javax.inject:1",
  annotation: "javax.annotation:javax.annotation-api:1.2",
  "rxkotlin": "io.reactivex.rxjava2:rxkotlin:2.2.0"
]
deps.fabric = [
  plugin: "io.fabric.tools:gradle:1.+",
  lib   : "com.crashlytics.sdk.android:crashlytics:2.7.1@aar"
]
deps.other = [
  facebook        : "com.facebook.android:facebook-android-sdk:4.28.0",
  live_adapter_rx2: 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0',

  plugin          : "com.android.tools.build:gradle:3.0.1",
  binding         : "com.android.databinding:compiler:3.0.1",

  gson            : "com.google.code.gson:gson:2.8.2",
  sdp             : "com.intuit.sdp:sdp-android:$versions.intuit",
  ssp             : "com.intuit.ssp:ssp-android:$versions.intuit",

  dexmaker        : "com.linkedin.dexmaker:dexmaker-mockito:2.2.0",
  timber          : "com.jakewharton.timber:timber:4.5.1",
  junit           : "junit:junit:4.12",
  mock_web_server : "com.squareup.okhttp3:mockwebserver:3.8.1",
  hamcrest        : "org.hamcrest:hamcrest-all:1.3",

  photoView       : "com.github.chrisbanes:PhotoView:2.1.3",
  braintree       : "com.braintreepayments.api:braintree:2.7.3",
  timeago         : "com.github.marlonlom:timeago:3.0.1",
  lottie          : "com.airbnb.android:lottie:2.5.0-beta1"
]
ext.deps = deps

ext.build_versions = [
  min_sdk    : 16,
  target_sdk : 27
]
ext.proguard_list = [
  "$project.rootDir/settings/proguard/proguard-architecture-components.pro",
  "$project.rootDir/settings/proguard/proguard-crashlytics-2.pro",
  "$project.rootDir/settings/proguard/proguard-gson.pro",
  "$project.rootDir/settings/proguard/proguard-project.pro",
  "$project.rootDir/settings/proguard/proguard-rxjava-rxandroid.pro",
  "$project.rootDir/settings/proguard/proguard-square-okhttp3.pro",
  "$project.rootDir/settings/proguard/proguard-square-retrofit.pro",
  "$project.rootDir/settings/proguard/proguard-support-design.pro",
  "$project.rootDir/settings/proguard/proguard-support-v4.pro",
  "$project.rootDir/settings/proguard/proguard-picasso.pro"
]

def addRepos(RepositoryHandler handler) {
  handler.google()
  handler.jcenter()
  handler.mavenCentral()
  handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  handler.maven { url 'https://www.jitpack.io' }
  handler.maven { url 'https://maven.fabric.io/public' }
  handler.maven { url 'https://maven.google.com' }
}

ext.addRepos = this.&addRepos

def addProjectSetting() {
  ext.productionFilePath = "$project.rootDir/settings/versions/production.properties"
  ext.qaFilePath = "$project.rootDir/settings/versions/qa.properties"
  ext.developmentFilePath = "$project.rootDir/settings/versions/development.properties"
  ext.projectFilePath = "$project.rootDir/settings/versions/project.properties"

  ext.productionFlavor = "production"
  ext.qaFlavor = "qa"
  ext.developmentFlavor = "development"
  ext.projectVersion = "project"

  ext.readVersionFile = {
    String buildType = "buildVariant" ->
      def versionPropsFile
      if (buildType == productionFlavor)
        versionPropsFile = file(project.ext.productionFilePath)
      else if (buildType == qaFlavor)
        versionPropsFile = file(project.ext.qaFilePath)
      else if (buildType == developmentFlavor)
        versionPropsFile = file(project.ext.developmentFilePath)
      else if (buildType == projectVersion)
        versionPropsFile = file(project.ext.projectFilePath)
      else
        throw new FileNotFoundException("Unknown app variant type")

      if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        return versionProps
      } else {
        throw new GradleException("Could not read properties! - readVersionFile")
      }
  }

  ext.updateApplicationId = {
    String buildType = "buildVariant" ->
      println "-----------------------------------------------------------------------------"
      println "              Executing Update Application Id                                "
      println "-----------------------------------------------------------------------------"

      def versionPropsFile = file(project.ext.projectFilePath)
      if (versionPropsFile.canRead()) {
        def version = project.ext.readVersionFile(projectVersion)
        version['APPLICATION_ID'] = buildType.toString()

        def stream = new FileOutputStream(versionPropsFile)
        try {
          version.store(stream, null)
        } finally {
          stream.close()
        }

        println "Application Id is now... " + build
      } else {
        throw new GradleException("Could not read properties! - updateApplicationId")
      }
  }

  ext.updateCrashlyticsKey = {
    String buildType = "buildVariant" ->
      println "-----------------------------------------------------------------------------"
      println "              Executing Update Crashlytics Key                               "
      println "-----------------------------------------------------------------------------"

      def versionPropsFile = file(project.ext.projectFilePath)
      if (versionPropsFile.canRead()) {
        def version = project.ext.readVersionFile(projectVersion)
        version['CRASHLYTICS_KEY'] = buildType.toString()

        def stream = new FileOutputStream(versionPropsFile)
        try {
          version.store(stream, null)
        } finally {
          stream.close()
        }

        println "Crashlytics Key is now... " + build
      } else {
        throw new GradleException("Could not read properties! - updateCrashlyticsKey")
      }
  }
}

ext.addProjectSetting = this.&addProjectSetting

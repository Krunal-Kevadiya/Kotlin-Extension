# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
#fastlane_version "2.18.3"
fastlane_version "2.64.1"

default_platform :android

platform :android do
    # Fabric detail for Simform Solutions organization
      FABRIC_API_TOKEN = "96c68e9c0138cb4916e862697ecd5746657596e6"
      FABRIC_BUILD_SECRET = "26c18e9bb11b79d4fbf2b036d87c05bdbfef408cb7e58a4f496f2fa1451a1d1f"

      TESTER_EMAIL = ['krunal.k@simformsolutions.com', 'rcbrcb13@gmail.com', 'terrydan710@gmail.com']
      CLIENT_EMAIL = ['krunal.k@simformsolutions.com', 'rcbrcb13@gmail.com', 'terrydan710@gmail.com']

    #----------------------------------------------------------------------------------------------------------------------------------
        desc "Release for development"
        lane :devVariant do |options|
            version=""
            if (options[:versionChange] == 'Major' || options[:versionChange] == 'major')
                version = "Major"
            elsif (options[:versionChange] == 'Minor' || options[:versionChange] == 'minor')
                version = "Minor"
            elsif (options[:versionChange] == 'Patch' || options[:versionChange] == 'patch')
                version = "Patch"
            elsif (options[:versionChange] == 'Reset' || options[:versionChange] == 'reset')
                version = "Reset"
            else
                version = "Patch"
            end

            sh "bash ../settings/keystore/fastlane_script.sh " + "development " + version
            gradle(
              task: "assemble",
              flavor: "Development",
              build_type: "Debug"
            )

            crashlytics(
                emails: TESTER_EMAIL,
                api_token: FABRIC_API_TOKEN,
                build_secret: FABRIC_BUILD_SECRET,
                notifications: true
            )
            #apk_path: "app/build/outputs/apk/development/release/app-development-release.apk",
        end
    #----------------------------------------------------------------------------------------------------------------------------------
        desc "Release for qa"
        lane :qaVariant do |options|
            version=""
            if (options[:versionChange] == 'Major' || options[:versionChange] == 'major')
                version = "Major"
            elsif (options[:versionChange] == 'Minor' || options[:versionChange] == 'minor')
                version = "Minor"
            elsif (options[:versionChange] == 'Patch' || options[:versionChange] == 'patch')
                version = "Patch"
            elsif (options[:versionChange] == 'Reset' || options[:versionChange] == 'reset')
                version = "Reset"
            else
                version = "Patch"
            end

            sh "bash ../settings/keystore/fastlane_script.sh " + "qa " + version
            gradle(
              task: "assemble",
              flavor: "Qa",
              build_type: "Debug"
            )

            crashlytics(
                emails: TESTER_EMAIL,
                api_token: FABRIC_API_TOKEN,
                build_secret: FABRIC_BUILD_SECRET,
                notifications: true
            )
            #apk_path: "app/build/outputs/apk/qa/release/app-qa-release.apk",
        end
    #----------------------------------------------------------------------------------------------------------------------------------
        desc "Release for production"
        lane :productionVariant do |options|
            version=""
            if (options[:versionChange] == 'Major' || options[:versionChange] == 'major')
                version = "Major"
            elsif (options[:versionChange] == 'Minor' || options[:versionChange] == 'minor')
                version = "Minor"
            elsif (options[:versionChange] == 'Patch' || options[:versionChange] == 'patch')
                version = "Patch"
            elsif (options[:versionChange] == 'Reset' || options[:versionChange] == 'reset')
                version = "Reset"
            else
                version = "Patch"
            end

            sh "bash ../settings/keystore/fastlane_script.sh " + "production " + version
            gradle(
              task: "assemble",
              flavor: "Production",
              build_type: "Release"
            )

            crashlytics(
                emails: TESTER_EMAIL,
                api_token: FABRIC_API_TOKEN,
                build_secret: FABRIC_BUILD_SECRET,
                notifications: true
            )
            #supply
            #apk_path: "app/build/outputs/apk/production/release/app-production-release.apk",
        end
    #----------------------------------------------------------------------------------------------------------------------------------
        # Note : Run this file by calling below command
        # versionChange : major, minor, patch, reset
        # fastlane devVariant versionChange:"patch"
        # fastlane qaVariant versionChange:"patch"
        # fastlane productionVariant versionChange:"patch"
    #----------------------------------------------------------------------------------------------------------------------------------
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://docs.fastlane.tools/#metrics
